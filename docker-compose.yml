# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: spring-app # Use an image built from the specified dockerfile in the `backend` directory.
      dockerfile: Dockerfile
    ports:
      - "8081:8081" # Forward the exposed port 8081 on the container to port 8081 on the host machine
    restart: always
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend-demo
      - frontend-demo
    depends_on: 
      - db-demo # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/spring_app
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: admin     
     

  # Frontend Service 
  app-client:
    build:
      context: angular-app # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
    ports:
      - "4200:80" # Map the exposed port 80 on the container to port 4200 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - backend-demo

  # Database Service (Mysql)
  db-demo:
    image: mysql
    container_name: db-demo
    ports:
      - "3307:3306"
    restart: always
    networks:
      - backend-demo
    environment:
      # MYSQL_USER: root : root ko can khai bao
      MYSQL_DATABASE: spring_app
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - db-data-demo:/var/lib/mysql
  
# Volumes
volumes:
  db-data-demo:
    name: db-data-demo
# Networks to be created to facilitate communication between containers
networks:
  backend-demo:
    name: backend-demo
  frontend-demo:
    name: frontend-demo